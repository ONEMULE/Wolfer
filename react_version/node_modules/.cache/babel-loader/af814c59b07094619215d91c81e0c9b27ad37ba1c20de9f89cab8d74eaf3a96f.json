{"ast":null,"code":"import axios from 'axios';\n\n// 创建一个axios实例\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n  timeout: 30000,\n  // 30秒超时\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  // 在发送请求之前做些什么\n  return config;\n}, error => {\n  // 对请求错误做些什么\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  // 对响应数据做点什么\n  return response.data;\n}, error => {\n  // 对响应错误做点什么\n  let message = '请求失败';\n  if (error.response) {\n    // 服务器返回了错误状态码\n    message = error.response.data.message || `请求错误: ${error.response.status}`;\n  } else if (error.request) {\n    // 请求发出但没有收到响应\n    message = '服务器无响应，请检查网络连接';\n  } else {\n    // 请求设置有问题\n    message = error.message;\n  }\n  console.error('API请求错误:', message);\n  return Promise.reject({\n    message\n  });\n});\n\n// 导出API方法\nconst apiService = {\n  // 获取项目配置\n  getConfiguration: () => api.get('/api/configuration'),\n  // 保存配置\n  saveConfiguration: config => api.post('/api/configuration', config),\n  // 生成Namelist文件\n  generateNamelist: config => api.post('/api/generate', config),\n  // 下载生成的文件\n  downloadFile: filename => api.get(`/api/download/${filename}`, {\n    responseType: 'blob'\n  }),\n  // 获取物理参数选项\n  getPhysicsOptions: () => api.get('/api/physics-options'),\n  // 获取投影选项\n  getProjections: () => api.get('/api/projections'),\n  // 获取数据源选项\n  getDataSources: () => api.get('/api/data-sources'),\n  // 检查配置是否有效\n  validateConfig: config => api.post('/api/validate', config),\n  // 获取所有选项\n  getAllOptions: () => api.get('/api/options'),\n  // 获取默认配置\n  getDefaultConfig: () => api.get('/api/config'),\n  // 提交时间和数据源配置\n  saveTimeConfig: config => api.post('/api/time-config', config),\n  // 提交域配置\n  saveDomainConfig: config => api.post('/api/domain-config', config),\n  // 提交物理参数配置\n  savePhysicsConfig: config => api.post('/api/physics-config', config)\n};\nexport default apiService;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","error","Promise","reject","response","data","message","status","console","apiService","getConfiguration","get","saveConfiguration","post","generateNamelist","downloadFile","filename","responseType","getPhysicsOptions","getProjections","getDataSources","validateConfig","getAllOptions","getDefaultConfig","saveTimeConfig","saveDomainConfig","savePhysicsConfig"],"sources":["E:/Projects/Wolfer/react_version/src/api/api.js"],"sourcesContent":["import axios from 'axios';\n\n// 创建一个axios实例\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000', \n  timeout: 30000, // 30秒超时\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// 请求拦截器\napi.interceptors.request.use(\n  (config) => {\n    // 在发送请求之前做些什么\n    return config;\n  },\n  (error) => {\n    // 对请求错误做些什么\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器\napi.interceptors.response.use(\n  (response) => {\n    // 对响应数据做点什么\n    return response.data;\n  },\n  (error) => {\n    // 对响应错误做点什么\n    let message = '请求失败';\n    if (error.response) {\n      // 服务器返回了错误状态码\n      message = error.response.data.message || `请求错误: ${error.response.status}`;\n    } else if (error.request) {\n      // 请求发出但没有收到响应\n      message = '服务器无响应，请检查网络连接';\n    } else {\n      // 请求设置有问题\n      message = error.message;\n    }\n    console.error('API请求错误:', message);\n    return Promise.reject({ message });\n  }\n);\n\n// 导出API方法\nconst apiService = {\n  // 获取项目配置\n  getConfiguration: () => api.get('/api/configuration'),\n  \n  // 保存配置\n  saveConfiguration: (config) => api.post('/api/configuration', config),\n  \n  // 生成Namelist文件\n  generateNamelist: (config) => api.post('/api/generate', config),\n  \n  // 下载生成的文件\n  downloadFile: (filename) => api.get(`/api/download/${filename}`, { \n    responseType: 'blob' \n  }),\n  \n  // 获取物理参数选项\n  getPhysicsOptions: () => api.get('/api/physics-options'),\n  \n  // 获取投影选项\n  getProjections: () => api.get('/api/projections'),\n  \n  // 获取数据源选项\n  getDataSources: () => api.get('/api/data-sources'),\n  \n  // 检查配置是否有效\n  validateConfig: (config) => api.post('/api/validate', config),\n  \n  // 获取所有选项\n  getAllOptions: () => api.get('/api/options'),\n  \n  // 获取默认配置\n  getDefaultConfig: () => api.get('/api/config'),\n  \n  // 提交时间和数据源配置\n  saveTimeConfig: (config) => api.post('/api/time-config', config),\n  \n  // 提交域配置\n  saveDomainConfig: (config) => api.post('/api/domain-config', config),\n  \n  // 提交物理参数配置\n  savePhysicsConfig: (config) => api.post('/api/physics-config', config)\n};\n\nexport default apiService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}